// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/analytics/tracker.proto

package analytics

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Tracker service

func NewTrackerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Tracker service

type TrackerService interface {
	// 活跃
	Wake(ctx context.Context, in *Agent, opts ...client.CallOption) (*BlankResponse, error)
	// 记录
	Record(ctx context.Context, in *TrackerRecordRequest, opts ...client.CallOption) (*BlankResponse, error)
}

type trackerService struct {
	c    client.Client
	name string
}

func NewTrackerService(name string, c client.Client) TrackerService {
	return &trackerService{
		c:    c,
		name: name,
	}
}

func (c *trackerService) Wake(ctx context.Context, in *Agent, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Tracker.Wake", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerService) Record(ctx context.Context, in *TrackerRecordRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Tracker.Record", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tracker service

type TrackerHandler interface {
	// 活跃
	Wake(context.Context, *Agent, *BlankResponse) error
	// 记录
	Record(context.Context, *TrackerRecordRequest, *BlankResponse) error
}

func RegisterTrackerHandler(s server.Server, hdlr TrackerHandler, opts ...server.HandlerOption) error {
	type tracker interface {
		Wake(ctx context.Context, in *Agent, out *BlankResponse) error
		Record(ctx context.Context, in *TrackerRecordRequest, out *BlankResponse) error
	}
	type Tracker struct {
		tracker
	}
	h := &trackerHandler{hdlr}
	return s.Handle(s.NewHandler(&Tracker{h}, opts...))
}

type trackerHandler struct {
	TrackerHandler
}

func (h *trackerHandler) Wake(ctx context.Context, in *Agent, out *BlankResponse) error {
	return h.TrackerHandler.Wake(ctx, in, out)
}

func (h *trackerHandler) Record(ctx context.Context, in *TrackerRecordRequest, out *BlankResponse) error {
	return h.TrackerHandler.Record(ctx, in, out)
}
